@import '../dev/mixins-noop.less';
@import '../spec-system.less';

.__vertical-spacing-system-apply-distance(@__distance, @important: false) {
  //
  // Attention: isunit(@variable, '');
  // is the only way that this comparison has worked.
  // The fallback for this would be to check for
  // each of the individual units:
  //
  // & when (isunit(@variable, px)), (isunit(@variable, rem)), (isunit(@variable, em)) {
  //   [styles here]
  // }
  //
  // https://github.com/less/less.js/pull/2323
  //
  // The following variations were tried
  // and none worked (as of 30/04/2019):
  // - boolean(get-unit(@__distance))
  // - get-unit(@__distance) = ''
  //
  & when not (isunit(@__distance, '')) {
    margin-top: if(@important, @__distance ~' !important', @__distance);
  }

  & when (isunit(@__distance, '')) and not (@__distance = 0) {
    .mx__spacing-m-top(@__distance, @important);
  }

  & when (isunit(@__distance, '')) and (@__distance = 0) {
    margin-top: if(@important, ~'0 !important', 0);
  }
}

//
// Given a reference selector, establish spacing relationships
//
.__vertical-spacing-system-item(
  @__reference-selector,
  @__item-distances,
  @important: false) {
  //
  // Reference after Other
  //
  > *:not(@{__reference-selector}) + @{__reference-selector}:not(.vertical-spacing-exception) {
    .__vertical-spacing-system-apply-distance(@__item-distances[from-other], @important);
  }

  //
  // Other after Reference
  // TODO: test the chaining of :not() selector.
  // If working on all browsers, remove the first line, wich is just a
  // "defensive one"
  //
  > @{__reference-selector} + *:not(@{__reference-selector}),
  > @{__reference-selector} + *:not(@{__reference-selector}):not(.vertical-spacing-exception) {
    .__vertical-spacing-system-apply-distance(@__item-distances[to-other], @important);
  }

  //
  // Reference after another occurrence of Reference
  //
  > @{__reference-selector} + @{__reference-selector}:not(.vertical-spacing-exception) {
    .__vertical-spacing-system-apply-distance(@__item-distances[from-itself], @important);
  }
}

.mx__vertical-spacing-system(
  @__default-vertical-spacing: false,
  @__vertical-spacing-specs
) {

  > * {
    //
    // The system uses only top margins for controlling spacing,
    // thus bottom margins are annullated
    //
    margin-bottom: 0;
  }

  & when not (@__default-vertical-spacing = false) {
    //
    // Attempt to apply the vertical spacing to all
    // elements except those that have explicitly requested
    // to be left out of the system
    //
    > * + *:not(.vertical-spacing-exception) {
      .__vertical-spacing-system-apply-distance(@__default-vertical-spacing);
    }
  }

  .mx__spec-system-rulesets(
    @__vertical-spacing-specs,
    false,
    {
      // Ruleset generator
      .__vertical-spacing-system-item(@spec-name, {
        from-other: extract(@spec-values, 2);
        to-other: extract(@spec-values, 3);
        from-itself: extract(@spec-values, 4);
      }, boolean(extract(@spec-values, 5) = ~'!important'));
    }
  );
}
