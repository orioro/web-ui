@import './dev/mixins-noop.less';

//
// Applies property - value pairs in a tabular format
//
// Skips the following columns:
// - `_name`
// - `_custom-property`
//
.__spec-system-apply-base(
  @spec-properties,
  @spec-values) {

  @spec-important: boolean(
    (length(@spec-values) > length(@spec-properties)) and
    (extract(@spec-values, length(@spec-properties) + 1) = ~'!important')
  );

  each(@spec-properties, .(@__spec-property-or-ruleset, @spec-property-index) {
    & when    (length(@spec-values) >= @spec-property-index)
      and not (extract(@spec-values, @spec-property-index) = null) {

      @spec-property-value: extract(@spec-values, @spec-property-index);

      //
      // Tests the @spec-property to check if it starts with _
      //
      & when (iskeyword(@__spec-property-or-ruleset)) {
        & when not (boolean(replace(@__spec-property-or-ruleset, '^_.*$', 'starts-with-underscore') = starts-with-underscore)) {
          @{__spec-property-or-ruleset}: if(
            @spec-important,
            @spec-property-value ~' !important',
            @spec-property-value
          );
        }
      }

      //
      // Exposes:
      // - @spec-properties     - List of all properties of the spec
      // - @spec-values         - List of all values of the applied spec
      // - @spec-important      - Whether the spec has the important flag set
      // - @spec-property-index - Index of the currently applied property
      // - @spec-property-value - Value of the currently applied property
      //
      & when (isruleset(@__spec-property-or-ruleset)) {
        @__spec-property-or-ruleset();
      }
    }
  });
}

.__spec-system-apply(
  @spec-properties,
  @spec-values,
  @__spec-custom-styles: false) {

  & when (isruleset(@__spec-custom-styles)) {
    @spec-base-styles: {
      .__spec-system-apply-base(@spec-properties, @spec-values);
    };
    @__spec-custom-styles();
  }

  & when not (isruleset(@__spec-custom-styles)) {
    .__spec-system-apply-base(@spec-properties, @spec-values);
  }
}

//
// Attempts to find a matching spec and apply its rulesets
//
.mx__spec-system-apply(
  @__spec-list,
  @__target-spec-name,
  @__spec-custom-styles: false,
  @__spec-ruleset-generator: false) {

  @spec-properties: extract(@__spec-list, 1);

  & {
    //
    // Loop through the spec list
    //
    each(@__spec-list, .(@spec-values) {

      & when (extract(@spec-values, 1) = @__target-spec-name) {
        @spec-name: @__target-spec-name;
        @spec-styles: {
          .__spec-system-apply(@spec-properties, @spec-values, @__spec-custom-styles);
          .mx__dev-log(@__target-spec-name ~' -> '@spec-values, spec-applied);
        }

        & when (@__spec-ruleset-generator = false) {
          @spec-styles();
        }

        & when (isruleset(@__spec-ruleset-generator)) {
          //
          // Exposes:
          // - @spec-name
          // - @spec-properties
          // - ;
          //
          //
          @__spec-ruleset-generator();
        }
      }
    });
  }
}

.__spec-system-walk-spec-list(
  @__spec-list,
  @__spec-custom-styles,
  @__spec-ruleset-generator,
  @__current-spec-index,
  @__last-applied-spec-index,
  @__spec-logging-namespace
) when (@__current-spec-index <= length(@__spec-list)) {
  @__current-spec: extract(@__spec-list, @__current-spec-index);
  @__current-applied-spec-index: if(
    length(@__current-spec) = 1,
    @__last-applied-spec-index,
    @__current-spec-index
  );

  @spec-name: extract(@__current-spec, 1);
  // Use the first row as a list
  // of style properties.
  // It works as a table header for all specs.
  @spec-properties: extract(@__spec-list, 1);
  @spec-values: extract(@__spec-list, @__current-applied-spec-index);
  @spec-styles: {
    .__spec-system-apply(@spec-properties, @spec-values, @__spec-custom-styles);
    .mx__dev-log(@spec-name ~' -> '@spec-values, @__spec-logging-namespace);
  };

  //
  // Expose variables to the spec-ruleset generator
  // - @spec-name         - Name of the ruleset, intended to be used for selector generation
  // - @spec-properties   - List of properties
  // - @spec-values       - The values of the current spec
  // - @spec-important    - Boolean of whether the @important flas is on for the whole spec.
  // - @spec-styles       - A ruleset that contains the combination of header properties and the applied values
  //
  @__spec-ruleset-generator();

  .__spec-system-walk-spec-list(
    @__spec-list,
    @__spec-custom-styles,
    @__spec-ruleset-generator,
    @__current-spec-index + 1,
    @__current-applied-spec-index,
    @__spec-logging-namespace
  );
}

.mx__spec-system-rulesets(
  @__spec-list,
  @__spec-custom-styles: false,
  @__spec-ruleset-generator: {
    @{spec-name} {
      @spec-styles();
    }
  },
  @__spec-logging-namespace: spec) {

  //
  // Provide an isolate scope to prevent
  // variables from leaking
  //
  // See some discussion at:
  // https://github.com/less/less.js/issues/2767
  // https://github.com/less/less-meta/issues/16
  //
  & {
    .__spec-system-walk-spec-list(
      @__spec-list,
      @__spec-custom-styles,
      @__spec-ruleset-generator,
      2,
      2,
      @__spec-logging-namespace
    );
  }
}
