@import './dev/mixins-noop.less';

//
// Applies property - value pairs in a tabular format
//
// Skips the following columns:
// - `_name`
// - `_custom-property`
//
.__spec-system-apply-properties(@spec-properties, @__spec-applied-values) {
  @__spec-important: boolean(
    (length(@__spec-applied-values) > length(@spec-properties)) and
    (extract(@__spec-applied-values, length(@spec-properties) + 1) = ~'!important')
  );

  each(@spec-properties, .(@spec-property, @spec-property-index) {
    & when not (@spec-property = _name)
       and not (@spec-property = _)
       and     (length(@__spec-applied-values) >= @spec-property-index)
       and not (extract(@__spec-applied-values, @spec-property-index) = null) {

      @{spec-property}: if(
        @__spec-important,
        extract(@__spec-applied-values, @spec-property-index) ~' !important',
        extract(@__spec-applied-values, @spec-property-index)
      );
    }
  });
}

//
// Attempts to find a matching spec and apply its rulesets
//
.mx__spec-system-apply(
  @__spec-list,
  @target-spec-name,
  @__spec-ruleset-generator: false) {

  @spec-properties: extract(@__spec-list, 1);

  & {
    //
    // Loop through the spec list
    //
    each(@__spec-list, .(@spec) {

      & when (extract(@spec, 1) = @target-spec-name) {
        .__spec-system-apply-properties(@spec-properties, @spec);
        .mx__dev-log(@target-spec-name ~' -> '@spec, spec-applied);
      }

      & when (extract(@spec, 1) = @target-spec-name)
         and (isruleset(@__spec-ruleset-generator)) {

        @spec-name: @target-spec-name;
        @spec-important: boolean(
          (length(@spec) > length(@spec-properties)) and
          (extract(@spec, length(@spec-properties) + 1) = ~'!important')
        );

        @__spec-ruleset-generator();
      }
    });
  }
}

.__spec-system-walk-spec-list(
  @__spec-list,
  @__spec-ruleset-generator,
  @__current-spec-index,
  @__last-applied-spec-index,
  @__spec-logging-namespace
) when (@__current-spec-index <= length(@__spec-list)) {
  @__current-spec: extract(@__spec-list, @__current-spec-index);
  @__current-applied-spec-index: if(
    length(@__current-spec) = 1,
    @__last-applied-spec-index,
    @__current-spec-index
  );

  //
  // Expose variables to the spec-ruleset generator
  // - @spec-name
  //   Name of the ruleset, intended to be used for selector generation
  // - @spec-properties
  //   List of properties
  // - @spec
  //   The full specfications
  // - @spec-important
  //   Boolean of whether the @important flas is on for the whole spec.
  // - @spec-base-ruleset
  //   A ruleset that contains the combination of header properties and the applied values
  //
  @spec-name: extract(@__current-spec, 1);
  // Use the first row as a list
  // of style properties.
  // It works as a table header for all specs.
  @spec-properties: extract(@__spec-list, 1);
  @spec: extract(@__spec-list, @__current-applied-spec-index);
  @spec-important: boolean(
    (length(@spec) > length(@spec-properties)) and
    (extract(@spec, length(@spec-properties) + 1) = ~'!important')
  );
  @spec-base-ruleset: {
    .__spec-system-apply-properties(@spec-properties, @spec);
    .mx__dev-log(@spec-name ~' -> '@spec, @__spec-logging-namespace);
  };

  @__spec-ruleset-generator();

  .__spec-system-walk-spec-list(
    @__spec-list,
    @__spec-ruleset-generator,
    @__current-spec-index + 1,
    @__current-applied-spec-index,
    @__spec-logging-namespace
  );
}

.mx__spec-system-rulesets(
  @__spec-list,
  @__spec-ruleset-generator,
  @__spec-logging-namespace: spec) {

  //
  // Provide an isolate scope to prevent
  // variables from leaking
  //
  // See some discussion at:
  // https://github.com/less/less.js/issues/2767
  // https://github.com/less/less-meta/issues/16
  //
  & {
    .__spec-system-walk-spec-list(
      @__spec-list,
      @__spec-ruleset-generator,
      2,
      2,
      @__spec-logging-namespace
    );
  }
}
