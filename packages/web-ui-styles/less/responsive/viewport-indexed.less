@import '../dev/mixins-noop.less';

//
// Mixins for generating property values that respond pixel-by-pixel
// resizing of the viewport.
//
// Idea from responsive-font-size module, used in bootstrap
// https://github.com/twbs/rfs/blob/master/less.less
//

//
// (@current-width - @breakpoint-min)
// ─────────────────────────────────── * (@max - @min) + @min
// (@breakpoint-max - @breakpoint-min)
//
//       (@max - @min)
// ───────────────────────────────── * (current-width - @breakpoint-min) + @min
// (@breakpoint-max - @breakpoint-min)
//
//
// @max,
// @min,
// @breakpoint-max and
// @breakpoint-min MUST be expressed in the same unit, as they become multipliers
//
//
// E.G:
// breakpoint-min: 400px
// breakpoint-max: 1200px
// min: 38px
// max: 50px
//
// 12 / 800 * (100vw - 400px) + 38px
// 1.5vw - 6px + 38px
//
//
// ATTENTION:
// Ensure that the fixed part is at least 5px:
// https://developer.mozilla.org/en-US/docs/Web/CSS/calc#Accessibility_concerns
//
//   "When calc() is used for controlling text size,
//    be sure that one of the values includes a
//    relative length unit.
//
//    h1 {
//      font-size: calc(1.5rem + 3vw);
//    }
//
//    This ensures that text size will scale if the page is zoomed."
//
// In the equations above, the fixed part becomes:
//
//                @min * @breakpoint-max - @max * @breakpoint-min
// @__fixed-value = ───────────────────────────────────────────────────────────
//                             @breakpoint-max - @breakpoint-min
//
// Probably @min and @max variables are more flexible to change.
// Thus these are their equations:
//
//              @__target-min-fixed-value * (@breakpoint-max - @breakpoint-min) + @max * @breakpoint-min
// @min = ───────────────────────────────────────────────────────────────────────────────────────────
//                                             @breakpoint-max
//
//              @min * @breakpoint-max - @__target-min-fixed-value * (@breakpoint-max - @breakpoint-min)
// @max = ───────────────────────────────────────────────────────────────────────────────────────────
//                                             @breakpoint-min
//

//
// Private mixin that to be used only with the main
// .mx-private__responsive-viewport-indexed-property.
//
// Accesses the parent mixin's scope values
//
.mx-private__responsive-viewport-indexed-property-warning() {
  .suggested-value-message(
    @suggestion-name,
    @suggestion-output-unit,
    @actual,
    @suggested) {
    @with-units: if(
      @suggestion-output-unit = px,
      unit(@suggested, px),
      unit(@suggested / @__rem-value-unitless, rem)
    );

    --suggested-@{suggestion-name}: if(
      @suggested > @actual,
      ~'"higher @{with-units}"',
      ~'"lower @{with-units}"'
    );
  }

  --web-ui-error: ~'".mx__responsive-viewport-indexed-property computed value resulted in a smaller than ideal fixed value. This might cause issues when the zoom level is higher than 100%"';
  --current-fixed-value: if(
    @__value-unit = px,
    unit(@__fixed-value, px),
    unit(@__fixed-value / @__rem-value-unitless, rem)
  );
  --target-min-fixed-value: if(
    @__value-unit = px,
    unit(@__target-min-fixed-value, px),
    unit(@__target-min-fixed-value / @__rem-value-unitless, rem)
  );
  .suggested-value-message(
    min,
    @__value-unit,
    @__values-px-unitless[min],
    (@__target-min-fixed-value * (@__breakpoints-px-unitless[max] - @__breakpoints-px-unitless[min]) + @__values-px-unitless[max] * @__breakpoints-px-unitless[min]) / @__breakpoints-px-unitless[max]
  );
  .suggested-value-message(
    max,
    @__value-unit,
    @__values-px-unitless[max],
    (@__values-px-unitless[min] * @__breakpoints-px-unitless[max] - @__target-min-fixed-value * (@__breakpoints-px-unitless[max] - @__breakpoints-px-unitless[min])) / @__breakpoints-px-unitless[min]
  );
  .suggested-value-message(
    min-breakpoint,
    @__breakpoint-unit,
    @__breakpoints-px-unitless[min],
    @__breakpoints-px-unitless[max] * (@__values-px-unitless[min] - @__target-min-fixed-value) / (@__values-px-unitless[max] - @__target-min-fixed-value)
  );
  .suggested-value-message(
    max-breakpoint,
    @__breakpoint-unit,
    @__breakpoints-px-unitless[max],
    @__breakpoints-px-unitless[min] * (@__values-px-unitless[max] - @__target-min-fixed-value) / (@__values-px-unitless[min] - @__target-min-fixed-value)
  );
}

//
// Generates a set of rules that make a property's value respond
// linearly to a viewport dimension.
//
// Acceps either a ruleset-generator or a property
// as the first argument.
//
// Exposes `@responsive-viewport-indexed-value` variable to the @__ruleset-generator
//
.mx__responsive-viewport-indexed-property(
  @__ruleset-generator-or-property,
  @__values,
  @important: false,
  @__breakpoints: @ui--responsive-viewport-indexed-default-breakpoints,
  @__rem-value: @ui--responsive-viewport-indexed-default-rem-value,
  @__viewport-dimension: vw) {

  //
  // Provide isolate scope for variable
  // calculation
  //
  // See some discussion at:
  // https://github.com/less/less.js/issues/2767
  // https://github.com/less/less-meta/issues/16
  //
  & {
    //
    // @__value-unit and @__breakpoint-unit come
    // from the first value in their corresponding pairs
    //
    @__value-unit: get-unit(@__values[min]);
    @__breakpoint-unit: get-unit(@__breakpoints[min]);

    // Ensure @__rem-value has no units attached
    @__rem-value-unitless: unit(@__rem-value);

    //
    // Ensure all values are expressed
    // in unitless px
    //
    @__values-px-unitless: if(
      @__value-unit = px,
      {
        min: unit(@__values[min]);
        max: unit(@__values[max]);
      },
      {
        min: unit(@__values[min] * @__rem-value-unitless);
        max: unit(@__values[max] * @__rem-value-unitless);
      }
    );

    @__breakpoints-px-unitless: if(
      @__breakpoint-unit = px,
      {
        min: unit(@__breakpoints[min]);
        max: unit(@__breakpoints[max]);
      },
      {
        min: unit(@__breakpoints[min] * @__rem-value-unitless);
        max: unit(@__breakpoints[max] * @__rem-value-unitless);
      }
    );

    //
    // Make the mixin compatible with either setting a
    // single property or passing in a ruleset-generator
    // that has acces to @responsive-viewport-indexed-value
    // variable that contains the value calculated
    // relative to the viewport dimension.
    //
    @__ruleset-generator: if(
      isruleset(@__ruleset-generator-or-property),
      @__ruleset-generator-or-property,
      {
        @{__ruleset-generator-or-property}: @responsive-viewport-indexed-value;
      }
    );

    & when (@__values-px-unitless[min] = @__values-px-unitless[max]) {
      //
      // min and max are the same
      //
      @responsive-viewport-indexed-value-raw: if(
        @__value-unit = px,
        unit(@__values-px-unitless[min], px),
        unit(@__values-px-unitless[min] / @__rem-value-unitless, rem)
      );
      @responsive-viewport-indexed-value: if(
        @important,
        @responsive-viewport-indexed-value-raw ~' !important',
        @responsive-viewport-indexed-value-raw
      );

      @__ruleset-generator();
    }

    & when not (@__values-px-unitless[min] = @__values-px-unitless[max]) {
      @media (max-width: unit(@__breakpoints-px-unitless[min], px)) {
        @responsive-viewport-indexed-value-raw: if(
          @__value-unit = px,
          unit(@__values-px-unitless[min], px),
          unit(@__values-px-unitless[min] / @__rem-value-unitless, rem)
        );
        @responsive-viewport-indexed-value: if(
          @important,
          @responsive-viewport-indexed-value-raw ~' !important',
          @responsive-viewport-indexed-value-raw
        );

        @__ruleset-generator();
      }

      @media (min-width: unit(@__breakpoints-px-unitless[min] + 1, px)) and
             (max-width: unit(@__breakpoints-px-unitless[max] - 1, px)) {
        @__multiplier: (@__values-px-unitless[max] - @__values-px-unitless[min]) / (@__breakpoints-px-unitless[max] - @__breakpoints-px-unitless[min]);
        @__indexed-value: 100 * @__multiplier;
        @__fixed-value: (-1 * @__multiplier * @__breakpoints-px-unitless[min] + @__values-px-unitless[min]);

        @responsive-viewport-indexed-value-raw: if(
          @__value-unit = px,
          unit(@__indexed-value, @__viewport-dimension) ~'+' unit(@__fixed-value, px),
          unit(@__indexed-value, @__viewport-dimension) ~'+' unit(@__fixed-value / @__rem-value-unitless, rem)
        );
        @responsive-viewport-indexed-value: if(
          @important,
          calc(@responsive-viewport-indexed-value-raw) ~' !important',
          calc(@responsive-viewport-indexed-value-raw)
        );

        @__ruleset-generator();

        @__target-min-fixed-value: @__rem-value-unitless * .5;

        & when (@__fixed-value < @__target-min-fixed-value) {
          .mx-private__responsive-viewport-indexed-property-warning();
        }
      }

      @media (min-width: unit(@__breakpoints-px-unitless[max], px)) {
        @responsive-viewport-indexed-value-raw: if(
          @__value-unit = px,
          unit(@__values-px-unitless[max], px),
          unit(@__values-px-unitless[max] / @__rem-value-unitless, rem)
        );
        @responsive-viewport-indexed-value: if(
          @important,
          @responsive-viewport-indexed-value-raw ~' !important',
          @responsive-viewport-indexed-value-raw
        );

        @__ruleset-generator();
      }
    }
  }
}
