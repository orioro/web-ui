@import '../dev/mixins-noop.less';

//
// Mixins for generating property values that respond pixel-by-pixel
// resizing of the viewport.
//
// Idea from responsive-font-size module, used in bootstrap
// https://github.com/twbs/rfs/blob/master/less.less
//

//
// Detailed math:
//
// (@current-width - @breakpoint-min)
// ─────────────────────────────────── * (@max-value - @min-value) + @min-value
// (@breakpoint-max - @breakpoint-min)
//
//       (@max-value - @min-value)
// ───────────────────────────────── * (current-width - @breakpoint-min) + @min-value
// (@breakpoint-max - @breakpoint-min)
//
//
// @max-value,
// @min-value,
// @breakpoint-max and
// @breakpoint-min MUST be expressed in the same unit, as they become multipliers
//
//
// E.G:
// breakpoint-min: 400px
// breakpoint-max: 1200px
// min-value: 38px
// max-value: 50px
//
// 12 / 800 * (100vw - 400px) + 38px
// 1.5vw - 6px + 38px
//
//
// ATTENTION:
// Ensure that the fixed part is at least 5px:
// https://developer.mozilla.org/en-US/docs/Web/CSS/calc#Accessibility_concerns
//
//   "When calc() is used for controlling text size,
//    be sure that one of the values includes a
//    relative length unit.
//
//    h1 {
//      font-size: calc(1.5rem + 3vw);
//    }
//
//    This ensures that text size will scale if the page is zoomed."
//
// In the equations above, the fixed part becomes:
//
//                @min-value * @breakpoint-max - @max-value * @breakpoint-min
// @fixed-value = ───────────────────────────────────────────────────────────
//                             @breakpoint-max - @breakpoint-min
//
// Probably @min-value and @max-value variables are more flexible to change.
// Thus these are their equations:
//
//              @target-min-fixed-value * (@breakpoint-max - @breakpoint-min) + @max-value * @breakpoint-min
// @min-value = ───────────────────────────────────────────────────────────────────────────────────────────
//                                             @breakpoint-max
//
//              @min-value * @breakpoint-max - @target-min-fixed-value * (@breakpoint-max - @breakpoint-min)
// @max-value = ───────────────────────────────────────────────────────────────────────────────────────────
//                                             @breakpoint-min
//

//
// Private mixin that to be used only with the main
// .mx-private__responsive-viewport-indexed-property.
//
// Accesses the parent mixin's scope values
//
.mx-private__responsive-viewport-indexed-property-warning() {
  .suggested-value-message(
    @suggestion-name,
    @suggestion-output-unit,
    @actual,
    @suggested) {
    @with-units: if(
      @suggestion-output-unit = px,
      unit(@suggested, px),
      unit(@suggested / @rem-value-unitless, rem)
    );

    --suggested-@{suggestion-name}: if(
      @suggested > @actual,
      ~'"higher @{with-units}"',
      ~'"lower @{with-units}"'
    );
  }

  --web-ui-error: ~'".mx__responsive-viewport-indexed-property computed value resulted in a smaller than ideal fixed value. This might cause issues when the zoom level is higher than 100%"';
  --current-fixed-value: if(
    @value-unit = px,
    unit(@fixed-value, px),
    unit(@fixed-value / @rem-value-unitless, rem)
  );
  --target-min-fixed-value: if(
    @value-unit = px,
    unit(@target-min-fixed-value, px),
    unit(@target-min-fixed-value / @rem-value-unitless, rem)
  );
  .suggested-value-message(
    min-value,
    @value-unit,
    @values[min],
    (@target-min-fixed-value * (@breakpoints[max] - @breakpoints[min]) + @values[max] * @breakpoints[min]) / @breakpoints[max]
  );
  .suggested-value-message(
    max-value,
    @value-unit,
    @values[max],
    (@values[min] * @breakpoints[max] - @target-min-fixed-value * (@breakpoints[max] - @breakpoints[min])) / @breakpoints[min]
  );
  .suggested-value-message(
    min-breakpoint,
    @breakpoint-unit,
    @breakpoints[min],
    @breakpoints[max] * (@values[min] - @target-min-fixed-value) / (@values[max] - @target-min-fixed-value)
  );
  .suggested-value-message(
    max-breakpoint,
    @breakpoint-unit,
    @breakpoints[max],
    @breakpoints[min] * (@values[max] - @target-min-fixed-value) / (@values[min] - @target-min-fixed-value)
  );
}

//
// Generates a set of rules that make a property's value respond
// linearly to a viewport dimension.
//
// Acceps either a ruleset-generator or a property
// as the first argument.
//
// Exposes `@responsive-viewport-indexed-value` variable to the @ruleset-generator
//
.mx__responsive-viewport-indexed-property(
  @ruleset-generator-or-property,
  @options,
  @important: false,
  @breakpoint-min: @ui--responsive-viewport-indexed-default-breakpoint-min,
  @breakpoint-max: @ui--responsive-viewport-indexed-default-breakpoint-max,
  @rem-value: @ui--responsive-viewport-indexed-default-rem-value,
  @viewport-dimension: vw) {

  //
  // @value-unit and @breakpoint-unit come
  // from the first value in their corresponding pairs
  //
  @value-unit: get-unit(@options[min-value]);
  @breakpoint-unit: get-unit(@breakpoint-min);

  // Ensure @rem-value has no units attached
  @rem-value-unitless: unit(@rem-value);

  //
  // Ensure all values are expressed
  // in unitless px
  //
  @values: if(
    @value-unit = px,
    {
      min: unit(@options[min-value]);
      max: unit(@options[max-value]);
    },
    {
      min: unit(@options[min-value] * @rem-value-unitless);
      max: unit(@options[max-value] * @rem-value-unitless);
    }
  );

  @breakpoints: if(
    @breakpoint-unit = px,
    {
      min: unit(@breakpoint-min);
      max: unit(@breakpoint-max);
    },
    {
      min: unit(@breakpoint-min * @rem-value-unitless);
      max: unit(@breakpoint-max * @rem-value-unitless);
    }
  );

  //
  // Make the mixin compatible with either setting a
  // single property or passing in a ruleset-generator
  // that has acces to @responsive-viewport-indexed-value
  // variable that contains the value calculated
  // relative to the viewport dimension.
  //
  @ruleset-generator: if(
    isruleset(@ruleset-generator-or-property),
    @ruleset-generator-or-property,
    {
      @{ruleset-generator-or-property}: @responsive-viewport-indexed-value;
    }
  );

  & when (@values[min] = @values[max]) {
    //
    // min-value and max-value are the same
    //
    @responsive-viewport-indexed-value-raw: if(
      @value-unit = px,
      unit(@values[min], px),
      unit(@values[min] / @rem-value-unitless, rem)
    );
    @responsive-viewport-indexed-value: if(
      @important,
      @responsive-viewport-indexed-value-raw ~' !important',
      @responsive-viewport-indexed-value-raw
    );

    @ruleset-generator();
  }

  & when not (@values[min] = @values[max]) {
    @media (max-width: unit(@breakpoints[min], px)) {
      @responsive-viewport-indexed-value-raw: if(
        @value-unit = px,
        unit(@values[min], px),
        unit(@values[min] / @rem-value-unitless, rem)
      );
      @responsive-viewport-indexed-value: if(
        @important,
        @responsive-viewport-indexed-value-raw ~' !important',
        @responsive-viewport-indexed-value-raw
      );

      @ruleset-generator();
    }

    @media (min-width: unit(@breakpoints[min] + 1, px)) and
           (max-width: unit(@breakpoints[max] - 1, px)) {
      @multiplier: (@values[max] - @values[min]) / (@breakpoints[max] - @breakpoints[min]);
      @indexed-value: 100 * @multiplier;
      @fixed-value: (-1 * @multiplier * @breakpoints[min] + @values[min]);

      @responsive-viewport-indexed-value-raw: if(
        @value-unit = px,
        unit(@indexed-value, @viewport-dimension) ~'+' unit(@fixed-value, px),
        unit(@indexed-value, @viewport-dimension) ~'+' unit(@fixed-value / @rem-value-unitless, rem)
      );
      @responsive-viewport-indexed-value: if(
        @important,
        calc(@responsive-viewport-indexed-value-raw) ~' !important',
        calc(@responsive-viewport-indexed-value-raw)
      );

      @ruleset-generator();

      @target-min-fixed-value: @rem-value-unitless * .5;

      & when (@fixed-value < @target-min-fixed-value) {
        .mx-private__responsive-viewport-indexed-property-warning();
      }
    }

    @media (min-width: unit(@breakpoints[max], px)) {
      @responsive-viewport-indexed-value-raw: if(
        @value-unit = px,
        unit(@values[max], px),
        unit(@values[max] / @rem-value-unitless, rem)
      );
      @responsive-viewport-indexed-value: if(
        @important,
        @responsive-viewport-indexed-value-raw ~' !important',
        @responsive-viewport-indexed-value-raw
      );

      @ruleset-generator();
    }
  }
}
