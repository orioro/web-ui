@import './grid.less';

@ui--list-column-variants: 2, 3, 4, 5, 6;
@ui--list-sm-max-columns: 3;

@ui-private--floor-multiplier: 10000;

.mx__list-reset() {
	list-style: none;
	margin-top: 0;
	margin-bottom: 0;
	padding-left: 0;
}

.mx__list-n-column-rules(@column-count) {
  @gutter-count: @column-count - 1;

  > * {
    //
    // Values that vary according to the horizontal gutter width
    // @type {[type]}
    //
    .mx__grid-apply-gutter(horizontal, {
      // @gutter-value is exposed by .mx__grid-apply-gutter
      @gutter-total: @gutter-count * @gutter-value;

      @percentage-part: floor(@ui-private--floor-multiplier * 100% / @column-count) / @ui-private--floor-multiplier;
      @px-part: floor(@ui-private--floor-multiplier * @gutter-total / @column-count) / @ui-private--floor-multiplier;

      //
      // EDGE rounds the pixels upwards causing lists to break in incorrect places.
      // Example case: 3 columns, gutter-width 40px
      // `(100% - 80px) / 3` becomes
      // `33.333333% - 26.666667px` in EDGE
      //
      // Thus we need to pre-calculate and correctly round
      // numbers using floor.
      //
      width: calc(@percentage-part - @px-part);
      margin-right: @gutter-value;
    });

    //
    // Values that vary according to the vertical gutter
    //
    .mx__grid-apply-gutter(vertical, {
      // @gutter-value is exposed by .mx__grid-apply-gutter
      margin-top: @gutter-value;
    });

    //
    // Styles that do not depend on gutter width or heights
    //
    // Neutralize margin right for all items located
    // on the right edge of the container.
    // Example:
    // If column count is 3, ensure any item
    // that is multiple of 3 has no margin right.
    //
    &:nth-child(@{column-count}n),
    &:last-child {
      margin-right: 0;
    }
    &:nth-child(-n+@{column-count}) {
      margin-top: 0;
    }
  }

}

.mx-private__list-column-variants() {
  each(@ui--list-column-variants, {

    &.list--@{value} {
      .mx__media-min-md(.mx__list-n-column-rules(@value));
      .mx__media-only-sm(.mx__list-n-column-rules(min(@value, @ui--list-sm-max-columns)));
      .mx__media-only-xs({
        > * {
          width: 100%;
          margin-right: 0;
          // Apply the 3rd gutter value, which is the smallest
          margin-bottom: extract(@ui--grid-responsive-vertical-gutters, 3);

          &:last-child {
            margin-bottom: 0;
          }
        }
      });
    }
  });
}

.mx__lists() {
	.list-reset,
	ul.list,
	ol.list {
		.mx__list-reset();
	}

	.list {
	  display: flex;
	  flex-wrap: wrap;

    .mx-private__list-column-variants();
	}
}
