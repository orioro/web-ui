@import './dev/mixins-noop.less';

/**
 * Applies property - value pairs in a tabular format
 *
 * Skips the following columns:
 * - `_name`
 * - `_custom-property`
 */
.__spec-system-apply-properties(@__spec-properties, @__spec-applied-values) {
  @__spec-applied-values-important: boolean(
    (length(@__spec-applied-values) > length(@__spec-properties)) and
    (extract(@__spec-applied-values, length(@__spec-properties) + 1) = ~'!important')
  );

  each(@__spec-properties, .(@spec-property, @spec-property-index) {
    & when not (@spec-property = _name)
       and not (@spec-property = _custom)
       and     (length(@__spec-applied-values) >= @spec-property-index)
       and not (extract(@__spec-applied-values, @spec-property-index) = null) {
      .mx__dev-log(iskeyword @spec-property iskeyword(@spec-property));
      @{spec-property}: if(
        @__spec-applied-values-important,
        extract(@__spec-applied-values, @spec-property-index) ~' !important',
        extract(@__spec-applied-values, @spec-property-index)
      );
    }
  });
}

/**
 * Attempts to find a matching spec and apply its rulesets
 */
.mx__spec-system-apply(@__spec-list, @spec-name, @__spec-ruleset-generator: false) {
  //
  // Loop through the spec list
  //
  each(@__spec-list, .(@spec) {
    & when (extract(@spec, 1) = @spec-name) and (isruleset(@__spec-ruleset-generator)) {
      // Apply custom ruleset expopsing the @spec variable
      @__spec-ruleset-generator();
    }

    & when (extract(@spec, 1) = @spec-name) and not (isruleset(@__spec-ruleset-generator)) {
      // Assume the first item in the @__spec-list
      // is a list of properties of the spec
      //
      // Must skip the first item in each spec,
      // as it is simply the name of the spec.
      .__spec-system-apply-properties(extract(@__spec-list, 1), @spec);
      .mx__dev-log(@spec, ~'SPEC - applied');
    }
  });
}

.__spec-system-walk-spec-list(
  @__spec-list,
  @__spec-selector-prefix,
  @__spec-ruleset-generator,
  @__current-spec-index,
  @__last-applied-spec-index
) when (@__current-spec-index <= length(@__spec-list)) {
  @__current-spec: extract(@__spec-list, @__current-spec-index);
  @__current-applied-spec-index: if(
    length(@__current-spec) = 1,
    @__last-applied-spec-index,
    @__current-spec-index
  );

  //
  // Expose variables to the spec-ruleset generator
  // - @spec-name
  // - @spec
  //
  @spec-name: extract(@__current-spec, 1);
  @spec: extract(@__spec-list, @__current-applied-spec-index);

  @__spec-ruleset-generator();

  .__spec-system-walk-spec-list(
    @__spec-list,
    @__spec-selector-prefix,
    @__spec-ruleset-generator,
    @__current-spec-index + 1,
    @__current-applied-spec-index
  );
}

.mx__spec-system-rulesets(
  @__spec-list,
  @__spec-selector-prefix: false,
  @__spec-ruleset-generator: false) {
  & when (isruleset(@__spec-ruleset-generator)) {
    // No spec header
    .__spec-system-walk-spec-list(
      @__spec-list,
      @__spec-selector-prefix,
      @__spec-ruleset-generator,
      1,
      1
    );
  }

  & when not (isruleset(@__spec-ruleset-generator)) {
    // Has spec header
    // Skip the first row, as it will be used
    // as the spec header (list of properties)
    @__spec-properties: extract(@__spec-list, 1);

    .__spec-system-walk-spec-list(
      @__spec-list,
      @__spec-selector-prefix,
      {
        @__spec-selector: if(
          @__spec-selector-prefix = false,
          @spec-name,
          ~'@{__spec-selector-prefix}@{spec-name}'
        );

        @{__spec-selector} {
          .__spec-system-apply-properties(@__spec-properties, @spec);
          .mx__dev-log(@spec-name ~' -> '@spec, ~'SPEC - native');
        }
      },
      2,
      2
    );
  }
}
