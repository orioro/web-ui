//
// [color-name] [color-code] [contrasting-color]
//
@ui--colors:
  darkred,
  navy,
  lightyellow,
  yellow,
  lightgray,
  turquoise,
  magenta,
  black #000000 white,
  white #FFFFFF black;

@ui--color-text-dark: black;
@ui--color-text-light: white;

.mx-private__apply-ruleset-or-property(
  @private--apply-ruleset-or-property,
  @private--apply-ruleset-or-property-value: none) {

  @private--apply-ruleset: if(
    isruleset(@private--apply-ruleset-or-property),
    @private--apply-ruleset-or-property,
    {
      @{private--apply-ruleset-or-property}: @private--apply-ruleset-or-property-value;
    }
  );

  @private--apply-ruleset();
}

.mx-private__colors-expose-color-spec-variables(@apply-color-ruleset, @color-spec) {
  @color-name: extract(@color-spec, 1);
  @color-code: if(
    length(@color-spec) > 1,
    extract(@color-spec, 2),
    @color-name
  );
  @color-contrasting-color-code: if(
    length(@color-spec) > 2,
    extract(@color-spec, 3),
    contrast(@color-code, @ui--color-text-dark, @ui--color-text-light)
  );

  .mx-private__apply-ruleset-or-property(@apply-color-ruleset, @color-code);
}

.mx__color-classes() {
  each(@ui--colors, {
    .mx-private__colors-expose-color-spec-variables({
      &.bg-@{color-name} {
        color: @color-contrasting-color-code;
        border-color: @color-code;
        background-color: @color-code;
      }

      &.fg-@{color-name} {
        color: @color-code;
        border-color: @color-code;
      }

      &.border-@{color-name} {
        border-color: @color-code;
      }

      &.hover-bg-@{color-name}:hover {
        background-color: @color-code;
        border-color: @color-code;
        color: @color-contrasting-color-code;
      }

      &.hover-fg-@{color-name}:hover {
        color: @color-code;
        border-color: @color-code;
      }

    }, @value);
  });
}

//
// Generates color related rulesets
//
.mx__colors() {
  .mx__color-classes();
}
